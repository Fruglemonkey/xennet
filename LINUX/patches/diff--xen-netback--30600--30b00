diff --git a/root/to-patch/common.h b/LINUX/xen-netback/common.h
index 94b79c3..21543e1 100644
--- a/root/to-patch/common.h
+++ b/LINUX/xen-netback/common.h
@@ -32,6 +32,7 @@
 #include <linux/module.h>
 #include <linux/interrupt.h>
 #include <linux/slab.h>
+#include <linux/kthread.h>
 #include <linux/ip.h>
 #include <linux/in.h>
 #include <linux/io.h>
@@ -47,6 +48,20 @@
 
 struct xen_netbk;
 
+#ifdef CONFIG_NETMAP
+struct nm_grant_ring {
+	struct page **ring_pg;
+	struct page **buf_pg;
+	int *ring_ref;
+	int *buf_ref;
+	unsigned int kring_pof;
+	uint16_t irq;
+	uint16_t port;
+	uint16_t nr_buf_pgs;
+	uint16_t nr_ring_pgs;
+};
+#endif
+
 struct xenvif {
 	/* Unique identifier for this interface. */
 	domid_t          domid;
@@ -60,6 +75,12 @@ struct xenvif {
 	/* Physical parameters of the comms window. */
 	unsigned int     irq;
 
+	/* Split event channel support */
+	char tx_irq_name[IFNAMSIZ+4]; /* DEVNAME-tx */
+	unsigned int tx_irq;
+	char rx_irq_name[IFNAMSIZ+4]; /* DEVNAME-rx */
+	unsigned int rx_irq;
+
 	/* List of frontends to notify after a batch of frames sent. */
 	struct list_head notify_list;
 
@@ -76,6 +97,15 @@ struct xenvif {
 	/* Internal feature information. */
 	u8 can_queue:1;	    /* can queue packets for receiver? */
 
+#ifdef CONFIG_NETMAP
+	u8 netmap:1;
+	u8 split_evtchn:1;
+	struct task_struct *task;
+	wait_queue_head_t wq;
+	struct nm_grant_ring nmtx;
+	struct nm_grant_ring nmrx;
+#endif
+
 	/*
 	 * Allow xenvif_start_xmit() to peek ahead in the rx request
 	 * ring.  This is a prediction of what rx_req_cons will be
@@ -113,13 +143,15 @@ struct xenvif *xenvif_alloc(struct device *parent,
 			    unsigned int handle);
 
 int xenvif_connect(struct xenvif *vif, unsigned long tx_ring_ref,
-		   unsigned long rx_ring_ref, unsigned int evtchn);
+		   unsigned long rx_ring_ref, unsigned int tx_evtchn,
+		   unsigned rx_evtchn);
 void xenvif_disconnect(struct xenvif *vif);
 
 void xenvif_get(struct xenvif *vif);
 void xenvif_put(struct xenvif *vif);
 
 int xenvif_xenbus_init(void);
+void xenvif_xenbus_fini(void);
 
 int xenvif_schedulable(struct xenvif *vif);
 
diff --git a/root/to-patch/interface.c b/LINUX/xen-netback/interface.c
index b7d41f8..8cf2c2b 100644
--- a/root/to-patch/interface.c
+++ b/LINUX/xen-netback/interface.c
@@ -37,6 +37,10 @@
 #include <xen/events.h>
 #include <asm/xen/hypercall.h>
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <netback_netmap_linux.h>
+#endif
+
 #define XENVIF_QUEUE_LENGTH 32
 
 void xenvif_get(struct xenvif *vif)
@@ -60,6 +64,31 @@ static int xenvif_rx_schedulable(struct xenvif *vif)
 	return xenvif_schedulable(vif) && !xen_netbk_rx_ring_full(vif);
 }
 
+static irqreturn_t xenvif_tx_interrupt(int irq, void *dev_id)
+{
+	struct xenvif *vif = dev_id;
+#ifdef CONFIG_NETMAP
+	if (vif->netmap) {
+		xenvif_netmap_irqsched(vif, 1);
+		return IRQ_HANDLED;
+	}
+#endif /* CONFIG_NETMAP */
+	return IRQ_HANDLED;
+
+}
+
+static irqreturn_t xenvif_rx_interrupt(int irq, void *dev_id)
+{
+	struct xenvif *vif = dev_id;
+#ifdef CONFIG_NETMAP
+	if (vif->netmap) {
+		xenvif_netmap_irqsched(vif, 0);
+		return IRQ_HANDLED;
+	}
+#endif /* CONFIG_NETMAP */
+	return IRQ_HANDLED;
+}
+
 static irqreturn_t xenvif_interrupt(int irq, void *dev_id)
 {
 	struct xenvif *vif = dev_id;
@@ -124,6 +153,10 @@ static struct net_device_stats *xenvif_get_stats(struct net_device *dev)
 
 static void xenvif_up(struct xenvif *vif)
 {
+#ifdef CONFIG_NETMAP
+	if (vif->netmap)
+		return xenvif_netmap_up(vif);
+#endif
 	xen_netbk_add_xenvif(vif);
 	enable_irq(vif->irq);
 	xen_netbk_check_rx_xenvif(vif);
@@ -131,6 +164,10 @@ static void xenvif_up(struct xenvif *vif)
 
 static void xenvif_down(struct xenvif *vif)
 {
+#ifdef CONFIG_NETMAP
+	if (vif->netmap)
+		return xenvif_netmap_down(vif);
+#endif
 	disable_irq(vif->irq);
 	xen_netbk_deschedule_xenvif(vif);
 	xen_netbk_remove_xenvif(vif);
@@ -300,30 +337,70 @@ struct xenvif *xenvif_alloc(struct device *parent, domid_t domid,
 		return ERR_PTR(err);
 	}
 
+#ifdef CONFIG_NETMAP
+	xenvif_netmap_attach(vif);
+#endif
+
 	netdev_dbg(dev, "Successfully created xenvif\n");
 	return vif;
 }
 
 int xenvif_connect(struct xenvif *vif, unsigned long tx_ring_ref,
-		   unsigned long rx_ring_ref, unsigned int evtchn)
+		   unsigned long rx_ring_ref, unsigned int tx_evtchn,
+		   unsigned int rx_evtchn)
 {
 	int err = -ENOMEM;
 
 	/* Already connected through? */
 	if (vif->irq)
 		return 0;
+	
+	if (!vif->netmap) {
+		err = xen_netbk_map_frontend_rings(vif, tx_ring_ref, rx_ring_ref);
+		if (err < 0)
+			goto err;
+	}
 
-	err = xen_netbk_map_frontend_rings(vif, tx_ring_ref, rx_ring_ref);
-	if (err < 0)
-		goto err;
-
-	err = bind_interdomain_evtchn_to_irqhandler(
-		vif->domid, evtchn, xenvif_interrupt, 0,
-		vif->dev->name, vif);
-	if (err < 0)
-		goto err_unmap;
-	vif->irq = err;
-	disable_irq(vif->irq);
+	if (tx_evtchn == rx_evtchn) {
+		err = bind_interdomain_evtchn_to_irqhandler(
+			vif->domid, tx_evtchn, xenvif_interrupt, 0,
+				vif->dev->name, vif);
+		if (err < 0)
+			goto err_unmap;
+		vif->irq = err;
+		disable_irq(vif->irq);
+		pr_info("irq %d", vif->irq);
+	} else {
+		snprintf(vif->tx_irq_name, sizeof(vif->tx_irq_name),
+			 "%s-tx", vif->dev->name);
+		err = bind_interdomain_evtchn_to_irqhandler(
+			vif->domid, tx_evtchn, xenvif_tx_interrupt, 0,
+			vif->tx_irq_name, vif);
+		if (err < 0)
+			goto err_unmap;
+		vif->tx_irq = err;
+		pr_info("tx_irq %d", vif->tx_irq);
+		disable_irq(vif->tx_irq);
+
+		snprintf(vif->rx_irq_name, sizeof(vif->rx_irq_name),
+			 "%s-rx", vif->dev->name);
+		err = bind_interdomain_evtchn_to_irqhandler(
+			vif->domid, rx_evtchn, xenvif_rx_interrupt, 0,
+			vif->rx_irq_name, vif);
+		if (err < 0)
+			goto err_tx_unbind;
+		vif->rx_irq = err;
+		pr_info("rx_irq %d", vif->rx_irq);
+		disable_irq(vif->rx_irq);
+		init_waitqueue_head(&vif->wq);
+		vif->task = kthread_create(xenvif_netmap_kthread,
+						(void *)vif, "%s", vif->dev->name);
+		if (IS_ERR(vif->task)) {
+			pr_warn("Could not allocate kthread for %s\n", vif->dev->name);
+			err = PTR_ERR(vif->task);
+			goto err_rx_unbind;
+		}
+	}
 
 	xenvif_get(vif);
 
@@ -336,7 +413,17 @@ int xenvif_connect(struct xenvif *vif, unsigned long tx_ring_ref,
 		xenvif_up(vif);
 	rtnl_unlock();
 
+	if (vif->task)
+		wake_up_process(vif->task);
+
 	return 0;
+
+err_rx_unbind:
+	unbind_from_irqhandler(vif->rx_irq, vif);
+	vif->rx_irq = 0;
+err_tx_unbind:
+	unbind_from_irqhandler(vif->tx_irq, vif);
+	vif->tx_irq = 0;
 err_unmap:
 	xen_netbk_unmap_frontend_rings(vif);
 err:
@@ -363,6 +450,17 @@ void xenvif_disconnect(struct xenvif *vif)
 	if (vif->irq)
 		unbind_from_irqhandler(vif->irq, vif);
 
+#ifdef CONFIG_NETMAP
+	if (vif->tx_irq) {
+		unbind_from_irqhandler(vif->tx_irq, vif);
+		unbind_from_irqhandler(vif->rx_irq, vif);
+	}
+
+	if (vif->task)
+			kthread_stop(vif->task);
+
+	xenvif_netmap_detach(vif);
+#endif
 	unregister_netdev(vif->dev);
 
 	xen_netbk_unmap_frontend_rings(vif);
diff --git a/root/to-patch/netback.c b/LINUX/xen-netback/netback.c
index 682633b..cc6fb93 100644
--- a/root/to-patch/netback.c
+++ b/LINUX/xen-netback/netback.c
@@ -1701,5 +1701,20 @@ failed_init:
 
 module_init(netback_init);
 
+static void __exit netback_fini(void)
+{
+    int i;
+    xenvif_xenbus_fini();
+
+    for (i = 0; i < xen_netbk_group_nr; i++) {
+            struct xen_netbk *netbk = &xen_netbk[i];
+            del_timer(&netbk->net_timer);
+            kthread_stop(netbk->task);
+    }
+    vfree(xen_netbk);
+}
+
+module_exit(netback_fini);
+
 MODULE_LICENSE("Dual BSD/GPL");
 MODULE_ALIAS("xen-backend:vif");
diff --git a/root/to-patch/xenbus.c b/LINUX/xen-netback/xenbus.c
index 410018c..16c6e83 100644
--- a/root/to-patch/xenbus.c
+++ b/LINUX/xen-netback/xenbus.c
@@ -81,6 +81,13 @@ static int netback_probe(struct xenbus_device *dev,
 			xenbus_dev_fatal(dev, err, "starting transaction");
 			goto fail;
 		}
+#if CONFIG_NETMAP
+		err = xenbus_printf(xbt, dev->nodename, "feature-netmap", "%d", 0);
+		if (err) {
+			message = "writing feature-netmap";
+			goto abort_transaction;
+		}
+#endif
 
 		err = xenbus_printf(xbt, dev->nodename, "feature-sg", "%d", sg);
 		if (err) {
@@ -394,9 +401,30 @@ static int connect_rings(struct backend_info *be)
 	struct xenbus_device *dev = be->dev;
 	unsigned long tx_ring_ref, rx_ring_ref;
 	unsigned int evtchn, rx_copy;
+	unsigned int tx_evtchn, rx_evtchn;
 	int err;
 	int val;
 
+#ifdef CONFIG_NETMAP
+	if (xenbus_scanf(XBT_NIL, dev->nodename, "feature-netmap",
+				"%d", &val) < 0) {
+		val = 0;
+	}
+	vif->netmap = !!val;
+	vif->split_evtchn = vif->netmap;
+#endif
+
+	if (vif->split_evtchn) {
+			err = xenbus_gather(XBT_NIL, dev->otherend,
+					    "tx-ring-ref", "%lu", &tx_ring_ref,
+					    "rx-ring-ref", "%lu", &rx_ring_ref, NULL);
+
+			/* split event channels */
+			err = xenbus_gather(XBT_NIL, dev->otherend,
+			    "event-channel-tx", "%u", &tx_evtchn,
+			    "event-channel-rx", "%u", &rx_evtchn, NULL);
+			goto skip_features;
+	}
 	err = xenbus_gather(XBT_NIL, dev->otherend,
 			    "tx-ring-ref", "%lu", &tx_ring_ref,
 			    "rx-ring-ref", "%lu", &rx_ring_ref,
@@ -452,9 +480,12 @@ static int connect_rings(struct backend_info *be)
 			 "%d", &val) < 0)
 		val = 0;
 	vif->csum = !val;
+	rx_evtchn = tx_evtchn = evtchn;
 
+skip_features:
 	/* Map the shared frame, irq etc. */
-	err = xenvif_connect(vif, tx_ring_ref, rx_ring_ref, evtchn);
+	err = xenvif_connect(vif, tx_ring_ref, rx_ring_ref, tx_evtchn,
+					rx_evtchn);
 	if (err) {
 		xenbus_dev_fatal(dev, err,
 				 "mapping shared-frames %lu/%lu port %u",
@@ -485,3 +516,8 @@ int xenvif_xenbus_init(void)
 {
 	return xenbus_register_backend(&netback_driver);
 }
+
+void xenvif_xenbus_fini(void)
+{
+	return xenbus_unregister_driver(&netback_driver);
+}
